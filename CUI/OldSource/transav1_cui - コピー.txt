package main

import (
	"flag"
	"fmt"
	"os"
	"time"

	"gopkg.in/ini.v1" // iniファイル読み込みライブラリ
)

var (
	sourceDir       string
	destDir         string
	ffmpegPath      string
	encodingProfile int
	encoder         string
	encoderOptions  string
	logToFile       bool
	debugMode       bool
	restart         bool
	forceStart      bool
	configFilePath  string
	scriptStartTime time.Time
)

// iniファイルの読み込み・生成
func readOrCreateConfig(filePath string) error {
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		// iniファイルが存在しない場合、新規作成
		cfg := ini.Empty()
		cfg.Section("Paths").Key("SourceDir").SetValue("C:\\Source")
		cfg.Section("Paths").Key("DestDir").SetValue("C:\\Dest")
		cfg.Section("Paths").Key("FfmpegPath").SetValue("C:\\ffmpeg\\bin")
		cfg.Section("Encoding").Key("EncodingProfile").SetValue("2")
		cfg.Section("Encoding").Key("Encoder").SetValue("av1_nvenc")
		cfg.Section("Encoding").Key("EncoderOptions").SetValue("")
		cfg.Section("Options").Key("LogToFile").SetValue("false")
		cfg.Section("Options").Key("DebugMode").SetValue("false")
		cfg.Section("Options").Key("Restart").SetValue("false")
		cfg.Section("Options").Key("ForceStart").SetValue("false")

		if err := cfg.SaveTo(filePath); err != nil {
			return fmt.Errorf("設定ファイルの作成エラー: %v", err)
		}
		fmt.Printf("設定ファイルが生成されました: %s\n", filePath)
		return nil
	}

	// iniファイルが存在する場合、読み込み
	cfg, err := ini.Load(filePath)
	if err != nil {
		return fmt.Errorf("設定ファイルの読み込みエラー: %v", err)
	}

	// 設定値を取得
	sourceDir = cfg.Section("Paths").Key("SourceDir").MustString("")
	destDir = cfg.Section("Paths").Key("DestDir").MustString("")
	ffmpegPath = cfg.Section("Paths").Key("FfmpegPath").MustString("")
	encodingProfile = cfg.Section("Encoding").Key("EncodingProfile").MustInt(2)
	encoder = cfg.Section("Encoding").Key("Encoder").MustString("av1_nvenc")
	encoderOptions = cfg.Section("Encoding").Key("EncoderOptions").MustString("")
	logToFile = cfg.Section("Options").Key("LogToFile").MustBool(false)
	debugMode = cfg.Section("Options").Key("DebugMode").MustBool(false)
	restart = cfg.Section("Options").Key("Restart").MustBool(false)
	forceStart = cfg.Section("Options").Key("ForceStart").MustBool(false)

	return nil
}

// 前処理（Restart / ForceStart対応）
func preProcessing() error {
	if forceStart {
		fmt.Println("!!!警告!!! 出力先を完全に削除します。")
		fmt.Printf("削除中: %s\n", destDir)
		if err := os.RemoveAll(destDir); err != nil {
			return fmt.Errorf("出力先削除失敗: %v", err)
		}
		fmt.Println("削除完了。")
	}

	if restart {
		fmt.Println("前回の失敗ファイルの削除を開始します...")
		// エラーマーカーの削除をここで実装
	}

	return nil
}

// 主処理
func processFiles() error {
	// ファイルのリストアップを実施
	fmt.Printf("ソースディレクトリ: %s\n", sourceDir)
	fmt.Printf("出力ディレクトリ: %s\n", destDir)

	// エンコード処理を実行
	fmt.Println("エンコード処理を開始...")
	// 具体的な処理を実装する
	return nil
}

// スクリプト終了処理
func finalizeScript() {
	fmt.Println("スクリプト終了処理中...")
	// 一時フォルダの削除など
	fmt.Println("スクリプトが正常終了しました。")
}

func main() {
	// コマンドライン引数
	flag.StringVar(&sourceDir, "s", "", "ソースディレクトリ")
	flag.StringVar(&destDir, "o", "", "出力ディレクトリ")
	flag.StringVar(&ffmpegPath, "f", "", "ffmpegの実行ファイルフォルダ")
	flag.IntVar(&encodingProfile, "e", 2, "エンコードプロファイル (1:圧縮重視, 2:バランス, 3:画質重視)")
	flag.StringVar(&encoder, "ENC", "av1_nvenc", "エンコーダ名")
	flag.StringVar(&encoderOptions, "opt", "", "エンコーダオプション")
	flag.BoolVar(&logToFile, "log", false, "ログをファイル出力")
	flag.BoolVar(&debugMode, "DEBUG", false, "デバッグモード")
	flag.BoolVar(&restart, "r", false, "リスタート")
	flag.BoolVar(&forceStart, "Force", false, "強制開始")
	flag.StringVar(&configFilePath, "config", "config.ini", "設定ファイルのパス")
	flag.Parse()

	// 設定ファイルの読み込みまたは生成
	err := readOrCreateConfig(configFilePath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "設定ファイルエラー: %v\n", err)
		os.Exit(1)
	}

	// 前処理
	if err := preProcessing(); err != nil {
		fmt.Fprintf(os.Stderr, "前処理エラー: %v\n", err)
		os.Exit(1)
	}

	// 主処理
	if err := processFiles(); err != nil {
		fmt.Fprintf(os.Stderr, "処理エラー: %v\n", err)
		os.Exit(1)
	}

	// 終了処理
	finalizeScript()
}
